from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
import logging
from database import Database
from keyboards import *
from utils import *
from config import config

logger = logging.getLogger(__name__)


class Handlers:
    def __init__(self, db: Database):
        self.db = db

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        telegram_id = user.id

        if self.db.user_exists(telegram_id):
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üéæ\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tennis Club Bot! üéæ\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            return config.STATES['REGISTER_FIRST_NAME']

    async def register_first_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['first_name'] = update.message.text
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        return config.STATES['REGISTER_LAST_NAME']

    async def register_last_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['last_name'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "–§–æ—Ä–º–∞—Ç: +7 XXX XXX XX XX –∏–ª–∏ 8 XXX XXX XX XX"
        )
        return config.STATES['REGISTER_PHONE']

    async def register_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        phone = update.message.text

        if not validate_phone(phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return config.STATES['REGISTER_PHONE']

        formatted_phone = format_phone(phone)
        context.user_data['phone'] = formatted_phone

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.register_user(
            telegram_id=update.effective_user.id,
            first_name=context.user_data['first_name'],
            last_name=context.user_data['last_name'],
            phone=formatted_phone
        )

        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = self.db.get_user(update.effective_user.id)
        subscription = self.db.get_active_subscription(user['id'])

        if subscription:
            message = (
                f"üí∞ <b>–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>\n"
                f"–ù–æ–º–µ—Ä: {subscription['subscription_number']}\n"
                f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_amount(subscription['initial_amount'])}\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{format_amount(subscription['current_balance'])}</b>\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_date(subscription['start_date'])}"
            )
        else:
            message = (
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é."
            )

        await update.message.reply_text(message, parse_mode=ParseMode.HTML)

    async def new_subscription_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return config.STATES['NEW_SUBSCRIPTION_NUMBER']

    async def new_subscription_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['subscription_number'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:")
        return config.STATES['NEW_SUBSCRIPTION_AMOUNT']

    async def new_subscription_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            amount = float(update.message.text.replace(',', '.'))
            if amount <= 0:
                raise ValueError

            user = self.db.get_user(update.effective_user.id)
            subscription_id = self.db.create_subscription(
                user_id=user['id'],
                subscription_number=context.user_data['subscription_number'],
                initial_amount=amount
            )

            await update.message.reply_text(
                f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                f"–ù–æ–º–µ—Ä: {context.user_data['subscription_number']}\n"
                f"–°—É–º–º–∞: {format_amount(amount)}",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return config.STATES['NEW_SUBSCRIPTION_AMOUNT']

    async def add_training_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = self.db.get_user(update.effective_user.id)
        subscription = self.db.get_active_subscription(user['id'])

        if not subscription:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_duration_keyboard()
        )
        return config.STATES['TRAINING_DURATION']

    async def training_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        duration_text = update.message.text
        if duration_text == '‚ùå –û—Ç–º–µ–Ω–∞':
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
            return ConversationHandler.END

        duration = int(duration_text.split()[0])
        context.user_data['duration'] = duration

        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—ã–ª–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?",
            reply_markup=get_participants_keyboard()
        )
        return config.STATES['TRAINING_PARTICIPANTS']

    async def training_participants(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        participants_text = update.message.text
        if participants_text == '‚ùå –û—Ç–º–µ–Ω–∞':
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
            return ConversationHandler.END

        participants = int(participants_text.split()[0])
        context.user_data['participants'] = participants

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price = self.db.get_price(context.user_data['duration'], participants)
        if price:
            context.user_data['price'] = price
            await update.message.reply_text(
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {format_amount(price)}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ—Ä—Ç–∞:",
                reply_markup=get_court_type_keyboard()
            )
            return config.STATES['TRAINING_COURT']
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

    async def training_court(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        court_type = update.message.text
        if court_type == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            court_type = None
        context.user_data['court_type'] = court_type

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞ (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=ReplyKeyboardRemove()
        )
        return config.STATES['TRAINING_COACH']

    async def training_coach(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        coach = update.message.text
        if coach.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            coach = None

        user = self.db.get_user(update.effective_user.id)
        subscription = self.db.get_active_subscription(user['id'])

        try:
            training_id = self.db.add_training_session(
                user_id=user['id'],
                subscription_id=subscription['id'],
                duration=context.user_data['duration'],
                participants=context.user_data['participants'],
                court_type=context.user_data['court_type'],
                coach=coach
            )

            message = (
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.user_data['duration']} –º–∏–Ω\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {context.user_data['participants']}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_amount(context.user_data['price'])}\n"
                f"–¢–∏–ø –∫–æ—Ä—Ç–∞: {context.user_data['court_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–¢—Ä–µ–Ω–µ—Ä: {coach or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–ë–∞–ª–∞–Ω—Å: {format_amount(subscription['current_balance'])}"
            )

        except ValueError as e:
            message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

        await update.message.reply_text(message, reply_markup=get_main_menu())
        return ConversationHandler.END

    async def show_stats_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_period_keyboard()
        )
        return config.STATES['STATS_PERIOD']

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        period_text = update.message.text
        if period_text == '‚ùå –û—Ç–º–µ–Ω–∞':
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
            return ConversationHandler.END

        period_map = {
            'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é': 'week',
            'üìÖ –ó–∞ –º–µ—Å—è—Ü': 'month',
            'üìÖ –ó–∞ –≥–æ–¥': 'year',
            'üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è': 'all'
        }

        period = period_map.get(period_text, 'month')
        user = self.db.get_user(update.effective_user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        spent_amount = self.db.get_spent_amount(user['id'], period)
        training_count = self.db.get_training_count(user['id'], period)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        individual = self.db.get_training_count(user['id'], period, 1)
        pair = self.db.get_training_count(user['id'], period, 2)
        group_3 = self.db.get_training_count(user['id'], period, 3)
        group_4 = self.db.get_training_count(user['id'], period, 4)

        message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {get_period_name(period)}</b>\n\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{format_amount(spent_amount)}</b>\n"
            f"üéæ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{training_count}</b>\n\n"
            f"<b>–ü–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n"
            f"‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ: {individual}\n"
            f"‚Ä¢ –í–¥–≤–æ–µ–º: {pair}\n"
            f"‚Ä¢ –í—Ç—Ä–æ–µ–º: {group_3}\n"
            f"‚Ä¢ –í—á–µ—Ç–≤–µ—Ä–æ–º: {group_4}"
        )

        await update.message.reply_text(message, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
        return ConversationHandler.END

    async def show_training_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = self.db.get_user(update.effective_user.id)
        trainings = self.db.get_user_trainings(user['id'], limit=10)

        if not trainings:
            await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return

        message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"
        for training in trainings:
            message += (
                f"üìÖ {format_date(training['session_date'])}\n"
                f"   ‚è± {training['duration_minutes']} –º–∏–Ω"
                f" | üë• {training['participants_count']} —á–µ–ª."
                f" | üí∞ {format_amount(training['amount_paid'])}\n"
            )
            if training['court_type'] or training['coach_name']:
                message += f"   üéæ {training['court_type'] or ''}"
                if training['coach_name']:
                    message += f" | üë®‚Äçüè´ {training['coach_name']}"
                message += "\n"
            message += "\n"

        await update.message.reply_text(message, parse_mode=ParseMode.HTML)

    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = self.db.get_user(update.effective_user.id)
        subscription = self.db.get_active_subscription(user['id'])
        total_trainings = self.db.get_training_count(user['id'], 'all')

        message = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user['first_name']} {user['last_name'] or ''}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {format_date(user['registration_date'])}\n\n"
            f"üéæ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{total_trainings}</b>\n"
        )

        if subscription:
            message += (
                f"üí∞ –ê–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription['subscription_number']}\n"
                f"–ë–∞–ª–∞–Ω—Å: {format_amount(subscription['current_balance'])}"
            )
        else:
            message += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"

        await update.message.reply_text(message, parse_mode=ParseMode.HTML)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_menu()
        )
