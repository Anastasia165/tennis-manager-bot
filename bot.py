import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from database import Database
from handlers import Handlers
from config import config
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(config.DB_PATH) if os.path.dirname(config.DB_PATH) else '.', exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(config.DB_PATH)
    handlers = Handlers(db)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', handlers.start)],
        states={
            config.STATES['REGISTER_FIRST_NAME']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.register_first_name)
            ],
            config.STATES['REGISTER_LAST_NAME']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.register_last_name)
            ],
            config.STATES['REGISTER_PHONE']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.register_phone)
            ],
            config.STATES['NEW_SUBSCRIPTION_NUMBER']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.new_subscription_number)
            ],
            config.STATES['NEW_SUBSCRIPTION_AMOUNT']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.new_subscription_amount)
            ],
            config.STATES['TRAINING_DURATION']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.training_duration)
            ],
            config.STATES['TRAINING_PARTICIPANTS']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.training_participants)
            ],
            config.STATES['TRAINING_COURT']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.training_court)
            ],
            config.STATES['TRAINING_COACH']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.training_coach)
            ],
            config.STATES['STATS_PERIOD']: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.show_stats)
            ],
        },
        fallbacks=[CommandHandler('cancel', handlers.cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^üéæ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É$'), handlers.add_training_start))
    application.add_handler(MessageHandler(filters.Regex('^üí∞ –ë–∞–ª–∞–Ω—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞$'), handlers.show_balance))
    application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), handlers.show_stats_start))
    application.add_handler(MessageHandler(filters.Regex('^üìù –ù–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç$'), handlers.new_subscription_start))
    application.add_handler(MessageHandler(filters.Regex('^üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫$'), handlers.show_training_history))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ü—Ä–æ—Ñ–∏–ª—å$'), handlers.show_profile))
    application.add_handler(MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), handlers.cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.unknown_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()